#
# Copyright 2018, Ridecell, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
apiVersion: v1
kind: Namespace
metadata:
  name: postgres-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-operator
  namespace: postgres-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: zalando-postgres-operator # This name is semi-hardcoded due to the default value of pod_service_account_role_binding_definition
rules:
rules:
- apiGroups: [acid.zalan.do]
  resources: [postgresqls]
  verbs: [get, list, watch, update, patch]
- apiGroups: [acid.zalan.do]
  resources: [operatorconfigurations]
  verbs: [get, list, watch]
- apiGroups: [apiextensions.k8s.io]
  resources: [customresourcedefinitions]
  verbs: [create, get]
- apiGroups: [""]
  resources: [configmaps]
  verbs: [get]
- apiGroups: [""]
  resources: [endpoints]
  verbs: [create, delete, get, list, patch, watch] # watch needed if zalando-postgres-operator account is used for pods as well
- apiGroups: [""]
  resources: [secrets]
  verbs: [create, update, delete, get]
- apiGroups: [""]
  resources: [nodes]
  verbs: [get, list, watch]
- apiGroups: [""]
  resources: [persistentvolumeclaims]
  verbs: [delete, get, list]
- apiGroups: [""]
  resources: [persistentvolumes]
  verbs: [get, list, update] # update only for resizing AWS volumes
- apiGroups: [""]
  resources: [pods]
  verbs: [delete, get, list, watch, patch]
- apiGroups: [""]
  resources: [services]
  verbs: [create, delete, get, patch]
- apiGroups: [apps]
  resources: [statefulsets]
  verbs: [create, delete, get, list, patch]
- apiGroups: [""]
  resources: [namespaces]
  verbs: [get]
- apiGroups: [policy]
  resources: [poddisruptionbudgets]
  verbs: [create, delete, get]
- apiGroups: [""]
  resources: [serviceaccounts]
  verbs: [get, create]
- apiGroups: [rbac.authorization.k8s.io]
  resources: [rolebindings]
  verbs: [get, create]
- apiGroups: [rbac.authorization.k8s.io]
  resources: [clusterroles]
  verbs: [bind]
  resourceNames: [zalando-postgres-operator]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: postgres-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: zalando-postgres-operator
subjects:
- name: postgres-operator
  namespace: postgres-operator
  kind: ServiceAccount
---
kind: Service
apiVersion: v1
metadata:
  name: postgres-operator
  namespace: postgres-operator
spec:
  selector:
    app: postgres-operator
spec:
  selector:
    app: postgres-operator
  ports:
  - protocol: TCP
    port: 65535
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-operator
  namespace: postgres-operator
spec:
  selector:
    matchLabels:
      app: postgres-operator
  serviceName: postgres-operator
  template:
    metadata:
      labels:
        app: postgres-operator
    spec:
      serviceAccountName: postgres-operator
      containers:
      - name: default
        image: registry.opensource.zalan.do/acid/postgres-operator:v1.0.0-18-g86ba92a
        command: ["/postgres-operator", "-logtostderr"]
        imagePullPolicy: Always
        env:
        - name: CONFIG_MAP_NAME
          value: postgres-operator
        resources:
          requests:
            cpu: 100m
            memory: 64M
          limits:
            cpu: 100m
            memory: 64M
      terminationGracePeriodSeconds: 10
  # Workaround for https://github.com/kubernetes-sigs/kustomize/issues/677
  volumeClaimTemplates: []
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-operator
  namespace: postgres-operator
data:
  watched_namespace: "*"
  cluster_labels: application:spilo
  cluster_name_label: version
  pod_role_label: spilo-role

  debug_logging: "true"
  workers: "4"
  docker_image: registry.opensource.zalan.do/acid/spilo-cdp-10:1.4-p31
  secret_name_template: '{username}.{cluster}.credentials'
  super_username: postgres
  enable_teams_api: "false"
  # enable_team_superuser: "false"
  # team_admin_role: "admin"
  # teams_api_url: http://fake-teams-api.default.svc.cluster.local
  # team_api_role_configuration: "log_statement:all"
  # infrastructure_roles_secret_name: postgresql-infrastructure-roles
  # oauth_token_secret_name: postgresql-operator
  # pam_role_name: zalandos
  # pam_configuration: |
  #  https://info.example.com/oauth2/tokeninfo?access_token= uid realm=/employees
  aws_region: eu-central-1
  db_hosted_zone: db.example.com
  master_dns_name_format: '{cluster}.{team}.staging.{hostedzone}'
  replica_dns_name_format: '{cluster}-repl.{team}.staging.{hostedzone}'
  enable_master_load_balancer: "true"
  enable_replica_load_balancer: "false"

  pdb_name_format: "postgres-{cluster}-pdb"

  api_port: "8080"
  ring_log_lines: "100"
  cluster_history_entries: "1000"
  pod_terminate_grace_period: 5m
  pod_deletion_wait_timeout: 10m
  pod_label_wait_timeout: 10m
  ready_wait_interval: 3s
  ready_wait_timeout: 30s
  replication_username: standby
  resource_check_interval: 3s
  resource_check_timeout: 10m
  resync_period: 5m
